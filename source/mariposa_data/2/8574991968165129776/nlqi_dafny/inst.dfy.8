include "nl_basics.dfy"

import opened nl_basics
lemma inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	var temp_0_0 := ((a0*a0)*(b0-c0));
	var temp_0_1 := (((a0*a0)*b0)-((a0*a0)*c0));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_distributive((a0*a0), b0, c0);}// 1
	var temp_1_0 := ((d1*a1)*(d1*b1));
	var temp_1_1 := ((d1*a1)*(b1*d1));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_commutative(d1, b1);}// 1
	var temp_2_0 := ((c2*a2)+(c2*d2));
	var temp_2_1 := ((c2*a2)+(d2*c2));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_commutative(c2, d2);}// 1
	var temp_3_0 := ((a3*c3)*(a3*d3));
	var temp_3_1 := ((a3*d3)*(a3*c3));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_is_commutative((a3*c3), (a3*d3));}// 1
	var temp_4_0 := ((d4*c4)*(d4-d4));
	var temp_4_1 := (d4*(c4*(d4-d4)));
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_is_associative(d4, c4, (d4-d4));}// 1
	var temp_5_0 := ((d5*d5)*(b5*a5));
	var temp_5_1 := ((b5*a5)*(d5*d5));
	assert(temp_5_0 == temp_5_1) by 
			{lemma_mul_is_commutative((d5*d5), (b5*a5));}// 1
	var temp_6_0 := ((b6*b6)-(a6*c6));
	var temp_6_1 := ((b6*b6)-(c6*a6));
	assert(temp_6_0 == temp_6_1) by 
			{lemma_mul_is_commutative(a6, c6);}// 1
	var temp_7_0 := ((d7*c7)*(d7*d7));
	var temp_7_1 := ((d7*c7)*(d7*d7));
	assert(temp_7_0 == temp_7_1) by 
			{lemma_mul_is_commutative(d7, d7);}// 1

}
