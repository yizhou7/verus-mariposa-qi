include "nl_basics.dfy"

import opened nl_basics
lemma inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	var temp_0_0 := ((b0*a0)*b0);
	var temp_0_1 := (b0*(b0*a0));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_commutative((b0*a0), b0);}// 1
	var temp_1_0 := ((d1-(1 as int))*(d1*c1));
	var temp_1_1 := ((d1*c1)*(d1-(1 as int)));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_commutative((d1-(1 as int)), (d1*c1));}// 1
	var temp_2_0 := ((d2*d2)*(b2-d2));
	var temp_2_1 := (((d2*d2)*b2)-((d2*d2)*d2));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_distributive((d2*d2), b2, d2);}// 1
	var temp_3_0 := ((d3-d3)*(c3-a3));
	var temp_3_1 := ((c3-a3)*(d3-d3));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_is_commutative((d3-d3), (c3-a3));}// 1
	var temp_4_0 := (((49 as int)*d4)*(b4*c4));
	var temp_4_1 := ((d4*(49 as int))*(b4*c4));
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_is_commutative((49 as int), d4);}// 1
	var temp_5_0 := ((c5*c5)-((37 as int)+d5));
	var temp_5_1 := ((c5*c5)-((37 as int)+d5));
	assert(temp_5_0 == temp_5_1) by 
			{lemma_mul_is_commutative(c5, c5);}// 1
	var temp_6_0 := ((c6*d6)*(a6+c6));
	var temp_6_1 := ((a6+c6)*(c6*d6));
	assert(temp_6_0 == temp_6_1) by 
			{lemma_mul_is_commutative((c6*d6), (a6+c6));}// 1

}
