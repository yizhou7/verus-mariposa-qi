use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn auto_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((a0*a0)*((36 as int)*d0));
	let temp_0_1 = ((a0*a0)*(d0*(36 as int)));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_1_0 = ((c1+a1)+(d1*b1));
	let temp_1_1 = ((c1+a1)+(b1*d1));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_2_0 = ((d2-a2)*(a2-d2));
	let temp_2_1 = ((a2-d2)*(d2-a2));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_3_0 = ((d3*(84 as int))*(d3*d3));
	let temp_3_1 = (((84 as int)*d3)*(d3*d3));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_4_0 = ((c4-a4)*(c4*d4));
	let temp_4_1 = (((c4-a4)*c4)*d4);
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_5_0 = ((d5*b5)*(b5*d5));
	let temp_5_1 = (d5*(b5*(b5*d5)));
	assert(temp_5_0 == temp_5_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_6_0 = ((c6*(34 as int))*(b6*d6));
	let temp_6_1 = (((34 as int)*c6)*(b6*d6));
	assert(temp_6_0 == temp_6_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_7_0 = ((b7*c7)+(c7*d7));
	let temp_7_1 = ((c7*b7)+(c7*d7));
	assert(temp_7_0 == temp_7_1) by 
			{lemma_mul_properties_auto_1();}// 1

}

} // verus!