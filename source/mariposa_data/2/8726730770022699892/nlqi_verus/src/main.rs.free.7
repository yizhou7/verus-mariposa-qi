use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn free_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	lemma_mul_properties_auto_1();
	let temp_0_0 = ((a0*a0)*(d0-a0));
	let temp_0_1 = (((a0*a0)*d0)-((a0*a0)*a0));
	assert(temp_0_0 == temp_0_1);
	let temp_1_0 = ((b1*c1)*(a1*d1));
	let temp_1_1 = (b1*(c1*(a1*d1)));
	assert(temp_1_0 == temp_1_1);
	let temp_2_0 = ((d2*c2)*(b2*b2));
	let temp_2_1 = ((c2*d2)*(b2*b2));
	assert(temp_2_0 == temp_2_1);
	let temp_3_0 = ((a3*a3)*(d3*b3));
	let temp_3_1 = (((a3*a3)*d3)*b3);
	assert(temp_3_0 == temp_3_1);
	let temp_4_0 = ((b4+a4)*(c4*b4));
	let temp_4_1 = ((b4+a4)*(b4*c4));
	assert(temp_4_0 == temp_4_1);
	let temp_5_0 = ((c5*b5)+(d5*a5));
	let temp_5_1 = ((c5*b5)+(a5*d5));
	assert(temp_5_0 == temp_5_1);
	let temp_6_0 = ((b6+d6)*(b6*c6));
	let temp_6_1 = (((b6+d6)*b6)*c6);
	assert(temp_6_0 == temp_6_1);

}

} // verus!