use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((d0*c0)*(a0*b0));
	let temp_0_1 = ((c0*d0)*(a0*b0));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_commutative(d0, c0);}// 1
	let temp_1_0 = ((b1*c1)*(d1*a1));
	let temp_1_1 = (((b1*c1)*d1)*a1);
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_associative((b1*c1), d1, a1);}// 1
	let temp_2_0 = ((a2*b2)*(d2*a2));
	let temp_2_1 = ((d2*a2)*(a2*b2));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_commutative((a2*b2), (d2*a2));}// 1
	let temp_3_0 = ((c3*(74 as int))*(d3*c3));
	let temp_3_1 = ((d3*c3)*(c3*(74 as int)));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_is_commutative((c3*(74 as int)), (d3*c3));}// 1
	let temp_4_0 = ((b4*c4)*(c4*d4));
	let temp_4_1 = ((b4*c4)*(d4*c4));
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_is_commutative(c4, d4);}// 1
	let temp_5_0 = ((b5*d5)*(c5*b5));
	let temp_5_1 = (((b5*d5)*c5)*b5);
	assert(temp_5_0 == temp_5_1) by 
			{lemma_mul_is_associative((b5*d5), c5, b5);}// 1
	let temp_6_0 = ((d6*b6)*(c6*b6));
	let temp_6_1 = (d6*(b6*(c6*b6)));
	assert(temp_6_0 == temp_6_1) by 
			{lemma_mul_is_associative(d6, b6, (c6*b6));}// 1
	let temp_7_0 = ((c7*d7)*((53 as int)+b7));
	let temp_7_1 = (c7*(d7*((53 as int)+b7)));
	assert(temp_7_0 == temp_7_1) by 
			{lemma_mul_is_associative(c7, d7, ((53 as int)+b7));}// 1
	let temp_8_0 = ((d8*a8)*(a8*d8));
	let temp_8_1 = ((a8*d8)*(d8*a8));
	assert(temp_8_0 == temp_8_1) by 
			{lemma_mul_is_commutative((d8*a8), (a8*d8));}// 1

}

} // verus!