use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((b0*d0)*(c0*b0));
	let temp_0_1 = ((c0*b0)*(b0*d0));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_commutative((b0*d0), (c0*b0));}// 1
	let temp_1_0 = ((d1*c1)*(a1*c1));
	let temp_1_1 = ((c1*d1)*(a1*c1));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_commutative(d1, c1);}// 1
	let temp_2_0 = ((d2+a2)+(b2*a2));
	let temp_2_1 = ((d2+a2)+(a2*b2));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_commutative(b2, a2);}// 1
	let temp_3_0 = ((b3*c3)*(c3-d3));
	let temp_3_1 = ((c3-d3)*(b3*c3));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_is_commutative((b3*c3), (c3-d3));}// 1

}

} // verus!