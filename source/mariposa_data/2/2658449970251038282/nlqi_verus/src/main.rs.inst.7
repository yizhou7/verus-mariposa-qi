use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((b0-d0)*(a0*a0));
	let temp_0_1 = ((b0-d0)*(a0*a0));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_commutative(a0, a0);}// 1
	let temp_1_0 = ((d1+b1)*(b1*b1));
	let temp_1_1 = (((d1+b1)*b1)*b1);
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_associative((d1+b1), b1, b1);}// 1
	let temp_2_0 = ((a2*a2)*(d2+a2));
	let temp_2_1 = (((a2*a2)*d2)+((a2*a2)*a2));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_distributive((a2*a2), d2, a2);}// 1
	let temp_3_0 = ((d3+b3)*(c3*c3));
	let temp_3_1 = ((d3*(c3*c3))+(b3*(c3*c3)));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_is_distributive(d3, b3, (c3*c3));}// 1
	let temp_4_0 = ((a4-d4)+(d4*a4));
	let temp_4_1 = ((a4-d4)+(a4*d4));
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_is_commutative(d4, a4);}// 1
	let temp_5_0 = ((a5-a5)*(b5*d5));
	let temp_5_1 = (((a5-a5)*b5)*d5);
	assert(temp_5_0 == temp_5_1) by 
			{lemma_mul_is_associative((a5-a5), b5, d5);}// 1
	let temp_6_0 = ((b6*d6)*(d6*d6));
	let temp_6_1 = (((b6*d6)*d6)*d6);
	assert(temp_6_0 == temp_6_1) by 
			{lemma_mul_is_associative((b6*d6), d6, d6);}// 1

}

} // verus!