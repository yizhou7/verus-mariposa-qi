(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) :qid prelude_fuel_defaults :skolemid skolem_prelude_fuel_defaults))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) :qid prelude_type_id_const_int :skolemid skolem_prelude_type_id_const_int)))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) :qid prelude_has_type_bool :skolemid skolem_prelude_has_type_bool)))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) :qid prelude_as_type :skolemid skolem_prelude_as_type)))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) :qid prelude_mk_fun :skolemid skolem_prelude_mk_fun)))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) :qid prelude_unbox_box_bool :skolemid skolem_prelude_unbox_box_bool)))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) :qid prelude_unbox_box_int :skolemid skolem_prelude_unbox_box_int)))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) :qid prelude_box_unbox_bool :skolemid skolem_prelude_box_unbox_bool)))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) :qid prelude_box_unbox_int :skolemid skolem_prelude_box_unbox_int)))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) :qid prelude_box_unbox_nat :skolemid skolem_prelude_box_unbox_nat)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) :qid prelude_box_unbox_uint :skolemid skolem_prelude_box_unbox_uint)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) :qid prelude_box_unbox_sint :skolemid skolem_prelude_box_unbox_sint)))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) :qid prelude_strlit_injective :skolemid skolem_prelude_strlit_injective)))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) :qid prelude_box_unbox_strslice :skolemid skolem_prelude_box_unbox_strslice)))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) :qid prelude_unbox_box_strslice :skolemid skolem_prelude_unbox_box_strslice)))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) :qid prelude_has_type_strslice :skolemid skolem_prelude_has_type_strslice)))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) :qid prelude_ext_eq :skolemid skolem_prelude_ext_eq)))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) :qid prelude_nat_clip :skolemid skolem_prelude_nat_clip)))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) :qid prelude_u_clip :skolemid skolem_prelude_u_clip)))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) :qid prelude_i_clip :skolemid skolem_prelude_i_clip)))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) :qid prelude_u_inv :skolemid skolem_prelude_u_inv)))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) :qid prelude_i_inv :skolemid skolem_prelude_i_inv)))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) :qid prelude_has_type_int :skolemid skolem_prelude_has_type_int)))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) :qid prelude_has_type_nat :skolemid skolem_prelude_has_type_nat)))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) :qid prelude_has_type_uint :skolemid skolem_prelude_has_type_uint)))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) :qid prelude_has_type_sint :skolemid skolem_prelude_has_type_sint)))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) :qid prelude_unbox_int :skolemid skolem_prelude_unbox_int)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) :qid prelude_unbox_uint :skolemid skolem_prelude_unbox_uint)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) :qid prelude_unbox_sint :skolemid skolem_prelude_unbox_sint)))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)) :qid prelude_add :skolemid skolem_prelude_add)))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)) :qid prelude_sub :skolemid skolem_prelude_sub)))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)) :qid prelude_mul :skolemid skolem_prelude_mul)))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)) :qid prelude_eucdiv :skolemid skolem_prelude_eucdiv)))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)) :qid prelude_eucmod :skolemid skolem_prelude_eucmod)))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)) :qid prelude_mul_nats :skolemid skolem_prelude_mul_nats)))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)) :qid prelude_div_unsigned_in_bounds :skolemid skolem_prelude_div_unsigned_in_bounds)))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)) :qid prelude_mod_unsigned_in_bounds :skolemid skolem_prelude_mod_unsigned_in_bounds)))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) :qid prelude_box_unbox_char :skolemid skolem_prelude_box_unbox_char)))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) :qid prelude_unbox_box_char :skolemid skolem_prelude_unbox_box_char)))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) :qid prelude_has_type_char :skolemid skolem_prelude_has_type_char)))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) :qid prelude_char_injective :skolemid skolem_prelude_char_injective)))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) :qid prelude_to_unicode_bounds :skolemid skolem_prelude_to_unicode_bounds)))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and ((_ partial-order 0) x y) (not (= x y)))) :pattern ((height_lt x y)) :qid prelude_height_lt :skolemid skolem_prelude_height_lt)))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) :qid prelude_check_decrease_int :skolemid skolem_prelude_check_decrease_int)))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) :qid prelude_check_decrease_height :skolemid skolem_prelude_check_decrease_height)))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)) :qid prelude_singularmod :skolemid skolem_prelude_singularmod)))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'root module'")
(set-info :comment ";; Fuel")
(assert true)
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x@ tuple%0.)) (! (= x@ (%Poly%tuple%0. (Poly%tuple%0. x@))) :pattern ((Poly%tuple%0. x@)) :qid internal_crate__tuple__0_box_axiom_definition :skolemid skolem_internal_crate__tuple__0_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%tuple%0.) (= x@ (Poly%tuple%0. (%Poly%tuple%0. x@)))) :pattern ((has_type x@ TYPE%tuple%0.)) :qid internal_crate__tuple__0_unbox_axiom_definition :skolemid skolem_internal_crate__tuple__0_unbox_axiom_definition)))
(assert (forall ((x@ tuple%0.)) (! (has_type (Poly%tuple%0. x@) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x@) TYPE%tuple%0.)) :qid internal_crate__tuple__0_has_type_always_definition :skolemid skolem_internal_crate__tuple__0_has_type_always_definition)))
(set-info :comment ";; Function-Specs main::nl_basics::lemma_mul_is_associative")
(declare-fun ens%main!nl_basics.lemma_mul_is_associative. (Int Int Int) Bool)
(assert (forall ((x~2@ Int) (y~4@ Int) (z~6@ Int)) (! (= (ens%main!nl_basics.lemma_mul_is_associative. x~2@ y~4@ z~6@) (= (Mul x~2@ (Mul y~4@ z~6@)) (Mul (Mul x~2@ y~4@) z~6@))) :pattern ((ens%main!nl_basics.lemma_mul_is_associative. x~2@ y~4@ z~6@)) :qid internal_ens__main!nl_basics.lemma_mul_is_associative._definition :skolemid skolem_internal_ens__main!nl_basics.lemma_mul_is_associative._definition)))
(set-info :comment ";; Function-Specs main::nl_basics::lemma_mul_is_commutative")
(declare-fun ens%main!nl_basics.lemma_mul_is_commutative. (Int Int) Bool)
(assert (forall ((x~2@ Int) (y~4@ Int)) (! (= (ens%main!nl_basics.lemma_mul_is_commutative. x~2@ y~4@) (= (Mul x~2@ y~4@) (Mul y~4@ x~2@))) :pattern ((ens%main!nl_basics.lemma_mul_is_commutative. x~2@ y~4@)) :qid internal_ens__main!nl_basics.lemma_mul_is_commutative._definition :skolemid skolem_internal_ens__main!nl_basics.lemma_mul_is_commutative._definition)))
(set-info :comment ";; Function-Specs main::nl_basics::lemma_mul_is_distributive")
(declare-fun ens%main!nl_basics.lemma_mul_is_distributive. (Int Int Int) Bool)
(assert (forall ((x~2@ Int) (y~4@ Int) (z~6@ Int)) (! (= (ens%main!nl_basics.lemma_mul_is_distributive. x~2@ y~4@ z~6@) (and (= (Mul x~2@ (Add y~4@ z~6@)) (Add (Mul x~2@ y~4@) (Mul x~2@ z~6@))) (= (Mul (Add x~2@ y~4@) z~6@) (Add (Mul x~2@ z~6@) (Mul y~4@ z~6@))) (= (Mul x~2@ (Sub y~4@ z~6@)) (Sub (Mul x~2@ y~4@) (Mul x~2@ z~6@))) (= (Mul (Sub x~2@ y~4@) z~6@) (Sub (Mul x~2@ z~6@) (Mul y~4@ z~6@))))) :pattern ((ens%main!nl_basics.lemma_mul_is_distributive. x~2@ y~4@ z~6@)) :qid internal_ens__main!nl_basics.lemma_mul_is_distributive._definition :skolemid skolem_internal_ens__main!nl_basics.lemma_mul_is_distributive._definition)))
(set-info :comment ";; Function-Def main::free_0")
(set-info :comment ";; ./nlqi_verus//src/main.rs:7:1: 36:40 (#0)")
(push 1)
(declare-const a0~2@ Int)
(declare-const b0~4@ Int)
(declare-const c0~6@ Int)
(declare-const d0~8@ Int)
(declare-const a1~10@ Int)
(declare-const b1~12@ Int)
(declare-const c1~14@ Int)
(declare-const d1~16@ Int)
(declare-const a2~18@ Int)
(declare-const b2~20@ Int)
(declare-const c2~22@ Int)
(declare-const d2~24@ Int)
(declare-const a3~26@ Int)
(declare-const b3~28@ Int)
(declare-const c3~30@ Int)
(declare-const d3~32@ Int)
(declare-const a4~34@ Int)
(declare-const b4~36@ Int)
(declare-const c4~38@ Int)
(declare-const d4~40@ Int)
(declare-const a5~42@ Int)
(declare-const b5~44@ Int)
(declare-const c5~46@ Int)
(declare-const d5~48@ Int)
(declare-const a6~50@ Int)
(declare-const b6~52@ Int)
(declare-const c6~54@ Int)
(declare-const d6~56@ Int)
(declare-const a7~58@ Int)
(declare-const b7~60@ Int)
(declare-const c7~62@ Int)
(declare-const d7~64@ Int)
(declare-const a8~66@ Int)
(declare-const b8~68@ Int)
(declare-const c8~70@ Int)
(declare-const d8~72@ Int)
(declare-const a9~74@ Int)
(declare-const b9~76@ Int)
(declare-const c9~78@ Int)
(declare-const d9~80@ Int)
(declare-const a10~82@ Int)
(declare-const b10~84@ Int)
(declare-const c10~86@ Int)
(declare-const d10~88@ Int)
(declare-const a11~90@ Int)
(declare-const b11~92@ Int)
(declare-const c11~94@ Int)
(declare-const d11~96@ Int)
(declare-const a12~98@ Int)
(declare-const b12~100@ Int)
(declare-const c12~102@ Int)
(declare-const d12~104@ Int)
(declare-const a13~106@ Int)
(declare-const b13~108@ Int)
(declare-const c13~110@ Int)
(declare-const d13~112@ Int)
(declare-const a14~114@ Int)
(declare-const b14~116@ Int)
(declare-const c14~118@ Int)
(declare-const d14~120@ Int)
(declare-const a15~122@ Int)
(declare-const b15~124@ Int)
(declare-const c15~126@ Int)
(declare-const d15~128@ Int)
(declare-const a16~130@ Int)
(declare-const b16~132@ Int)
(declare-const c16~134@ Int)
(declare-const d16~136@ Int)
(declare-const a17~138@ Int)
(declare-const b17~140@ Int)
(declare-const c17~142@ Int)
(declare-const d17~144@ Int)
(declare-const a18~146@ Int)
(declare-const b18~148@ Int)
(declare-const c18~150@ Int)
(declare-const d18~152@ Int)
(declare-const a19~154@ Int)
(declare-const b19~156@ Int)
(declare-const c19~158@ Int)
(declare-const d19~160@ Int)
(declare-const a20~162@ Int)
(declare-const b20~164@ Int)
(declare-const c20~166@ Int)
(declare-const d20~168@ Int)
(declare-const a21~170@ Int)
(declare-const b21~172@ Int)
(declare-const c21~174@ Int)
(declare-const d21~176@ Int)
(declare-const a22~178@ Int)
(declare-const b22~180@ Int)
(declare-const c22~182@ Int)
(declare-const d22~184@ Int)
(declare-const a23~186@ Int)
(declare-const b23~188@ Int)
(declare-const c23~190@ Int)
(declare-const d23~192@ Int)
(declare-const a24~194@ Int)
(declare-const b24~196@ Int)
(declare-const c24~198@ Int)
(declare-const d24~200@ Int)
(declare-const a25~202@ Int)
(declare-const b25~204@ Int)
(declare-const c25~206@ Int)
(declare-const d25~208@ Int)
(declare-const a26~210@ Int)
(declare-const b26~212@ Int)
(declare-const c26~214@ Int)
(declare-const d26~216@ Int)
(declare-const a27~218@ Int)
(declare-const b27~220@ Int)
(declare-const c27~222@ Int)
(declare-const d27~224@ Int)
(declare-const a28~226@ Int)
(declare-const b28~228@ Int)
(declare-const c28~230@ Int)
(declare-const d28~232@ Int)
(declare-const a29~234@ Int)
(declare-const b29~236@ Int)
(declare-const c29~238@ Int)
(declare-const d29~240@ Int)
(declare-const tmp%1@ Int)
(declare-const tmp%2@ Int)
(declare-const tmp%3@ Int)
(declare-const tmp%4@ Int)
(declare-const tmp%5@ Int)
(declare-const tmp%6@ Int)
(declare-const tmp%7@ Int)
(declare-const tmp%8@ Int)
(declare-const tmp%9@ Int)
(declare-const tmp%10@ Int)
(declare-const tmp%11@ Int)
(declare-const tmp%12@ Int)
(declare-const tmp%13@ Int)
(declare-const tmp%14@ Int)
(declare-const tmp%15@ Int)
(declare-const tmp%16@ Int)
(declare-const tmp%17@ Int)
(declare-const tmp%18@ Int)
(declare-const tmp%19@ Int)
(declare-const tmp%20@ Int)
(declare-const tmp%21@ Int)
(declare-const tmp%22@ Int)
(declare-const tmp%23@ Int)
(declare-const tmp%24@ Int)
(declare-const tmp%25@ Int)
(declare-const tmp%26@ Int)
(declare-const tmp%27@ Int)
(declare-const tmp%28@ Int)
(declare-const tmp%29@ Int)
(declare-const tmp%30@ Int)
(declare-const tmp%31@ Int)
(declare-const tmp%32@ Int)
(declare-const tmp%33@ Int)
(declare-const tmp%34@ Int)
(declare-const tmp%35@ Int)
(declare-const tmp%36@ Int)
(declare-const tmp%37@ Int)
(declare-const tmp%38@ Bool)
(declare-const tmp%39@ Int)
(declare-const tmp%40@ Int)
(declare-const tmp%41@ Int)
(declare-const tmp%42@ Int)
(declare-const tmp%43@ Int)
(declare-const tmp%44@ Int)
(declare-const tmp%45@ Int)
(declare-const tmp%46@ Int)
(declare-const tmp%47@ Int)
(declare-const tmp%48@ Int)
(declare-const tmp%49@ Int)
(declare-const tmp%50@ Int)
(declare-const tmp%51@ Int)
(declare-const tmp%52@ Int)
(declare-const tmp%53@ Int)
(declare-const tmp%54@ Int)
(declare-const tmp%55@ Int)
(declare-const tmp%56@ Int)
(declare-const tmp%57@ Int)
(declare-const tmp%58@ Int)
(declare-const tmp%59@ Int)
(declare-const tmp%60@ Int)
(declare-const tmp%61@ Int)
(declare-const tmp%62@ Int)
(declare-const tmp%63@ Int)
(declare-const tmp%64@ Int)
(declare-const tmp%65@ Int)
(declare-const tmp%66@ Int)
(declare-const tmp%67@ Int)
(declare-const tmp%68@ Int)
(declare-const tmp%69@ Int)
(declare-const tmp%70@ Int)
(declare-const tmp%71@ Int)
(declare-const tmp%72@ Int)
(declare-const tmp%73@ Int)
(declare-const tmp%74@ Int)
(declare-const tmp%75@ Int)
(declare-const tmp%76@ Int)
(declare-const tmp%77@ Int)
(declare-const tmp%78@ Int)
(declare-const tmp%79@ Int)
(declare-const tmp%80@ Int)
(declare-const tmp%81@ Int)
(declare-const tmp%82@ Int)
(declare-const tmp%83@ Int)
(declare-const tmp%84@ Int)
(declare-const tmp%85@ Int)
(declare-const tmp%86@ Int)
(declare-const tmp%87@ Int)
(declare-const tmp%88@ Int)
(declare-const tmp%89@ Int)
(declare-const tmp%90@ Int)
(declare-const tmp%91@ Int)
(declare-const tmp%92@ Int)
(declare-const tmp%93@ Int)
(declare-const temp_0_0~305@ Int)
(declare-const temp_0_1~370@ Int)
(declare-const temp_1_0~481@ Int)
(declare-const temp_1_1~558@ Int)
(declare-const temp_2_0~715@ Int)
(declare-const temp_2_1~776@ Int)
(declare-const temp_3_0~979@ Int)
(declare-const temp_3_1~1032@ Int)
(declare-const temp_4_0~1125@ Int)
(declare-const temp_4_1~1190@ Int)
(declare-const temp_5_0~1285@ Int)
(declare-const temp_5_1~1346@ Int)
(declare-const temp_6_0~1555@ Int)
(declare-const temp_6_1~1620@ Int)
(declare-const temp_7_0~1719@ Int)
(declare-const temp_7_1~1792@ Int)
(declare-const temp_8_0~2023@ Int)
(declare-const temp_8_1~2088@ Int)
(declare-const temp_9_0~2289@ Int)
(declare-const temp_9_1~2338@ Int)
(declare-const temp_10_0~2418@ Int)
(declare-const temp_10_1~2515@ Int)
(declare-const temp_11_0~2670@ Int)
(declare-const temp_11_1~2743@ Int)
(declare-const temp_12_0~2878@ Int)
(declare-const temp_12_1~2931@ Int)
(declare-const temp_13_0~3018@ Int)
(declare-const temp_13_1~3071@ Int)
(declare-const temp_14_0~3164@ Int)
(declare-const temp_14_1~3229@ Int)
(declare-const temp_15_0~3350@ Int)
(declare-const temp_15_1~3419@ Int)
(declare-const temp_16_0~3648@ Int)
(declare-const temp_16_1~3733@ Int)
(declare-const temp_17_0~3902@ Int)
(declare-const temp_17_1~3983@ Int)
(declare-const temp_18_0~4080@ Int)
(declare-const temp_18_1~4145@ Int)
(declare-const temp_19_0~4358@ Int)
(declare-const temp_19_1~4451@ Int)
(declare-const temp_20_0~4586@ Int)
(declare-const temp_20_1~4643@ Int)
(declare-const temp_21_0~4844@ Int)
(declare-const temp_21_1~4909@ Int)
(declare-const temp_22_0~5122@ Int)
(declare-const temp_22_1~5175@ Int)
(declare-const temp_23_0~5374@ Int)
(declare-const temp_23_1~5439@ Int)
(declare-const temp_24_0~5544@ Int)
(declare-const temp_24_1~5597@ Int)
(assert fuel_defaults)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> (= temp_0_0~305@ (Mul (Mul (Mul (Mul b0~4@ c0~6@) (Mul c0~6@ a0~2@)) (Mul (Sub a0~2@ d0~8@) (Mul a0~2@ b0~4@))) (Mul (Mul (Mul c0~6@ d0~8@) (Mul c0~6@ d0~8@)) (Mul (Mul d0~8@ a0~2@) (Mul d0~8@ d0~8@))))) (=> (= temp_0_1~370@ (Mul (Mul (Mul (Mul b0~4@ c0~6@) (Mul c0~6@ a0~2@)) (Mul (Mul (Sub a0~2@ d0~8@) a0~2@) b0~4@)) (Mul (Mul (Mul c0~6@ d0~8@) (Mul c0~6@ d0~8@)) (Mul (Mul d0~8@ a0~2@) (Mul d0~8@ d0~8@))))) (and (=> (= tmp%1@ (Sub a0~2@ d0~8@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%1@ a0~2@ b0~4@) (=> %%location_label%%0 (= temp_0_0~305@ temp_0_1~370@)))) (=> (= temp_0_0~305@ temp_0_1~370@) (=> (= temp_1_0~481@ (Mul (Mul (Mul (Mul d1~16@ d1~16@) (Mul a1~10@ d1~16@)) (Mul (Mul d1~16@ 91) (Mul b1~12@ a1~10@))) (Mul (Mul (Mul b1~12@ d1~16@) (Mul c1~14@ c1~14@)) (Mul (Mul b1~12@ b1~12@) (Mul b1~12@ d1~16@))))) (=> (= temp_1_1~558@ (Mul (Mul (Mul (Mul d1~16@ d1~16@) (Mul a1~10@ d1~16@)) (Mul (Mul d1~16@ 91) (Mul a1~10@ b1~12@))) (Mul (Mul (Mul b1~12@ d1~16@) (Mul c1~14@ c1~14@)) (Mul (Mul b1~12@ b1~12@) (Mul b1~12@ d1~16@))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. a1~10@ b1~12@) (=> (= tmp%2@ (Mul (Mul d1~16@ d1~16@) (Mul a1~10@ d1~16@))) (=> (= tmp%3@ (Mul d1~16@ 91)) (=> (= tmp%4@ (Mul a1~10@ b1~12@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%2@ tmp%3@ tmp%4@) (=> (= tmp%5@ (Mul (Mul d1~16@ d1~16@) (Mul a1~10@ d1~16@))) (=> (= tmp%6@ (Mul d1~16@ 91)) (=> (= tmp%7@ (Mul b1~12@ a1~10@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%5@ tmp%6@ tmp%7@) (=> %%location_label%%1 (= temp_1_0~481@ temp_1_1~558@))))))))))) (=> (= temp_1_0~481@ temp_1_1~558@) (=> (= temp_2_0~715@ (Mul (Sub (Mul a2~18@ (Add c2~22@ a2~18@)) (Mul (Mul b2~20@ d2~24@) (Mul d2~24@ b2~20@))) (Mul (Add (Mul b2~20@ d2~24@) (Mul c2~22@ b2~20@)) (Mul (Mul a2~18@ a2~18@) (Mul b2~20@ c2~22@))))) (=> (= temp_2_1~776@ (Mul (Sub (Mul a2~18@ (Add c2~22@ a2~18@)) (Mul (Mul b2~20@ d2~24@) (Mul d2~24@ b2~20@))) (Mul (Add (Mul b2~20@ d2~24@) (Mul c2~22@ b2~20@)) (Mul (Mul (Mul a2~18@ a2~18@) b2~20@) c2~22@)))) (and (=> (= tmp%8@ (Sub (Mul a2~18@ (Add c2~22@ a2~18@)) (Mul (Mul b2~20@ d2~24@) (Mul d2~24@ b2~20@)))) (=> (= tmp%9@ (Add (Mul b2~20@ d2~24@) (Mul c2~22@ b2~20@))) (=> (= tmp%10@ (Mul (Mul (Mul a2~18@ a2~18@) b2~20@) c2~22@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%8@ tmp%9@ tmp%10@) (=> (= tmp%11@ (Mul a2~18@ a2~18@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%11@ b2~20@ c2~22@) (=> (= tmp%12@ (Sub (Mul a2~18@ (Add c2~22@ a2~18@)) (Mul (Mul b2~20@ d2~24@) (Mul d2~24@ b2~20@)))) (=> (= tmp%13@ (Add (Mul b2~20@ d2~24@) (Mul c2~22@ b2~20@))) (=> (= tmp%14@ (Mul (Mul a2~18@ a2~18@) (Mul b2~20@ c2~22@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%12@ tmp%13@ tmp%14@) (=> %%location_label%%2 (= temp_2_0~715@ temp_2_1~776@)))))))))))) (=> (= temp_2_0~715@ temp_2_1~776@) (=> (= temp_3_0~979@ (Mul (Mul (Mul (Mul a3~26@ c3~30@) (Mul d3~32@ d3~32@)) (Mul (Sub a3~26@ a3~26@) (Mul a3~26@ d3~32@))) (Sub (Mul (Mul d3~32@ b3~28@) (Mul b3~28@ a3~26@)) d3~32@))) (=> (= temp_3_1~1032@ (Mul (Mul (Mul (Mul a3~26@ c3~30@) (Mul d3~32@ d3~32@)) (Mul (Sub a3~26@ a3~26@) (Mul a3~26@ d3~32@))) (Sub (Mul (Mul d3~32@ b3~28@) (Mul a3~26@ b3~28@)) d3~32@))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. a3~26@ b3~28@) (=> %%location_label%%3 (= temp_3_0~979@ temp_3_1~1032@))) (=> (= temp_3_0~979@ temp_3_1~1032@) (=> (= temp_4_0~1125@ (Mul (Mul (Mul (Sub c4~38@ a4~34@) (Mul b4~36@ c4~38@)) (Mul (Mul b4~36@ c4~38@) (Mul d4~40@ c4~38@))) (Sub (Mul (Add a4~34@ d4~40@) (Mul c4~38@ b4~36@)) (Mul (Mul b4~36@ a4~34@) (Mul b4~36@ c4~38@))))) (=> (= temp_4_1~1190@ (Mul (Mul (Mul (Sub c4~38@ a4~34@) (Mul b4~36@ c4~38@)) (Mul (Mul b4~36@ c4~38@) (Mul d4~40@ c4~38@))) (Sub (Mul (Mul (Add a4~34@ d4~40@) c4~38@) b4~36@) (Mul (Mul b4~36@ a4~34@) (Mul b4~36@ c4~38@))))) (and (=> (= tmp%15@ (Add a4~34@ d4~40@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%15@ c4~38@ b4~36@) (=> %%location_label%%4 (= temp_4_0~1125@ temp_4_1~1190@)))) (=> (= temp_4_0~1125@ temp_4_1~1190@) (=> (= temp_5_0~1285@ (Mul (Mul (Mul (Mul a5~42@ a5~42@) (Mul c5~46@ c5~46@)) (Mul (Mul a5~42@ b5~44@) (Mul c5~46@ d5~48@))) (Mul (Mul (Mul b5~44@ c5~46@) (Mul d5~48@ c5~46@)) (Mul (Mul c5~46@ a5~42@) a5~42@)))) (=> (= temp_5_1~1346@ (Mul (Mul (Mul (Mul c5~46@ c5~46@) (Mul a5~42@ a5~42@)) (Mul (Mul a5~42@ b5~44@) (Mul c5~46@ d5~48@))) (Mul (Mul (Mul b5~44@ c5~46@) (Mul d5~48@ c5~46@)) (Mul (Mul c5~46@ a5~42@) a5~42@)))) (and (=> (= tmp%16@ (Mul c5~46@ c5~46@)) (=> (= tmp%17@ (Mul a5~42@ a5~42@)) (=> (ens%main!nl_basics.lemma_mul_is_commutative. tmp%16@ tmp%17@) (=> (= tmp%18@ (Mul (Mul c5~46@ c5~46@) (Mul a5~42@ a5~42@))) (=> (= tmp%19@ (Mul (Mul a5~42@ b5~44@) (Mul c5~46@ d5~48@))) (=> (= tmp%20@ (Mul (Mul (Mul b5~44@ c5~46@) (Mul d5~48@ c5~46@)) (Mul (Mul c5~46@ a5~42@) a5~42@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%18@ tmp%19@ tmp%20@) (=> (= tmp%21@ (Mul (Mul a5~42@ a5~42@) (Mul c5~46@ c5~46@))) (=> (= tmp%22@ (Mul (Mul a5~42@ b5~44@) (Mul c5~46@ d5~48@))) (=> (= tmp%23@ (Mul (Mul (Mul b5~44@ c5~46@) (Mul d5~48@ c5~46@)) (Mul (Mul c5~46@ a5~42@) a5~42@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%21@ tmp%22@ tmp%23@) (=> %%location_label%%5 (= temp_5_0~1285@ temp_5_1~1346@))))))))))))) (=> (= temp_5_0~1285@ temp_5_1~1346@) (=> (= temp_6_0~1555@ (Mul (Mul (Mul (Mul b6~52@ d6~56@) d6~56@) (Mul (Mul b6~52@ a6~50@) (Mul d6~56@ c6~54@))) (Sub (Mul (Sub c6~54@ c6~54@) (Mul b6~52@ a6~50@)) (Mul c6~54@ (Mul d6~56@ a6~50@))))) (=> (= temp_6_1~1620@ (Mul (Mul (Mul (Mul b6~52@ d6~56@) d6~56@) (Mul (Mul b6~52@ a6~50@) (Mul d6~56@ c6~54@))) (Sub (Sub (Mul c6~54@ (Mul b6~52@ a6~50@)) (Mul c6~54@ (Mul b6~52@ a6~50@))) (Mul c6~54@ (Mul d6~56@ a6~50@))))) (and (=> (= tmp%24@ (Mul b6~52@ a6~50@)) (=> (ens%main!nl_basics.lemma_mul_is_distributive. c6~54@ c6~54@ tmp%24@) (=> %%location_label%%6 (= temp_6_0~1555@ temp_6_1~1620@)))) (=> (= temp_6_0~1555@ temp_6_1~1620@) (=> (= temp_7_0~1719@ (Mul (Mul (Mul (Mul b7~60@ d7~64@) (Sub b7~60@ d7~64@)) (Mul (Add a7~58@ c7~62@) (Mul c7~62@ b7~60@))) (Mul (Sub (Sub d7~64@ c7~62@) (Mul c7~62@ a7~58@)) (Add (Mul a7~58@ c7~62@) (Mul c7~62@ a7~58@))))) (=> (= temp_7_1~1792@ (Mul (Mul (Sub (Mul (Mul b7~60@ d7~64@) b7~60@) (Mul (Mul b7~60@ d7~64@) d7~64@)) (Mul (Add a7~58@ c7~62@) (Mul c7~62@ b7~60@))) (Mul (Sub (Sub d7~64@ c7~62@) (Mul c7~62@ a7~58@)) (Add (Mul a7~58@ c7~62@) (Mul c7~62@ a7~58@))))) (and (=> (= tmp%25@ (Sub (Mul (Mul b7~60@ d7~64@) b7~60@) (Mul (Mul b7~60@ d7~64@) d7~64@))) (=> (= tmp%26@ (Mul (Add a7~58@ c7~62@) (Mul c7~62@ b7~60@))) (=> (= tmp%27@ (Mul (Sub (Sub d7~64@ c7~62@) (Mul c7~62@ a7~58@)) (Add (Mul a7~58@ c7~62@) (Mul c7~62@ a7~58@)))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%25@ tmp%26@ tmp%27@) (=> (= tmp%28@ (Mul b7~60@ d7~64@)) (=> (ens%main!nl_basics.lemma_mul_is_distributive. tmp%28@ b7~60@ d7~64@) (=> (= tmp%29@ (Mul (Mul b7~60@ d7~64@) (Sub b7~60@ d7~64@))) (=> (= tmp%30@ (Mul (Add a7~58@ c7~62@) (Mul c7~62@ b7~60@))) (=> (= tmp%31@ (Mul (Sub (Sub d7~64@ c7~62@) (Mul c7~62@ a7~58@)) (Add (Mul a7~58@ c7~62@) (Mul c7~62@ a7~58@)))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%29@ tmp%30@ tmp%31@) (=> %%location_label%%7 (= temp_7_0~1719@ temp_7_1~1792@)))))))))))) (=> (= temp_7_0~1719@ temp_7_1~1792@) (=> (= temp_8_0~2023@ (Mul (Mul (Mul (Mul d8~72@ b8~68@) (Mul c8~70@ a8~66@)) (Sub (Mul c8~70@ d8~72@) (Mul b8~68@ b8~68@))) (Mul (Mul (Mul d8~72@ b8~68@) (Mul a8~66@ a8~66@)) (Sub (Mul a8~66@ b8~68@) (Mul a8~66@ c8~70@))))) (=> (= temp_8_1~2088@ (Mul (Mul (Mul (Mul d8~72@ b8~68@) (Mul a8~66@ c8~70@)) (Sub (Mul c8~70@ d8~72@) (Mul b8~68@ b8~68@))) (Mul (Mul (Mul d8~72@ b8~68@) (Mul a8~66@ a8~66@)) (Sub (Mul a8~66@ b8~68@) (Mul a8~66@ c8~70@))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. a8~66@ c8~70@) (=> (= tmp%32@ (Mul (Mul d8~72@ b8~68@) (Mul a8~66@ c8~70@))) (=> (= tmp%33@ (Sub (Mul c8~70@ d8~72@) (Mul b8~68@ b8~68@))) (=> (= tmp%34@ (Mul (Mul (Mul d8~72@ b8~68@) (Mul a8~66@ a8~66@)) (Sub (Mul a8~66@ b8~68@) (Mul a8~66@ c8~70@)))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%32@ tmp%33@ tmp%34@) (=> (= tmp%35@ (Mul (Mul d8~72@ b8~68@) (Mul c8~70@ a8~66@))) (=> (= tmp%36@ (Sub (Mul c8~70@ d8~72@) (Mul b8~68@ b8~68@))) (=> (= tmp%37@ (Mul (Mul (Mul d8~72@ b8~68@) (Mul a8~66@ a8~66@)) (Sub (Mul a8~66@ b8~68@) (Mul a8~66@ c8~70@)))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%35@ tmp%36@ tmp%37@) (=> %%location_label%%8 (= temp_8_0~2023@ temp_8_1~2088@))))))))))) (=> (= temp_8_0~2023@ temp_8_1~2088@) (=> (= temp_9_0~2289@ (Add (Mul (Mul (Mul b9~76@ a9~74@) (Mul d9~80@ d9~80@)) (Mul (Mul d9~80@ d9~80@) (Mul b9~76@ a9~74@))) (Mul (Mul d9~80@ (Mul a9~74@ d9~80@)) d9~80@))) (=> (= temp_9_1~2338@ (Add (Mul (Mul (Mul b9~76@ a9~74@) (Mul d9~80@ d9~80@)) (Mul (Mul d9~80@ d9~80@) (Mul b9~76@ a9~74@))) (Mul (Mul d9~80@ (Mul a9~74@ d9~80@)) d9~80@))) (=> (= tmp%38@ (= temp_9_0~2289@ temp_9_1~2338@)) (and (=> %%location_label%%9 tmp%38@) (=> tmp%38@ (=> (= temp_10_0~2418@ (Mul (Add (Mul (Mul c10~86@ a10~82@) (Mul d10~88@ c10~86@)) (Mul (Mul a10~82@ a10~82@) (Mul d10~88@ c10~86@))) (Mul (Mul (Mul a10~82@ a10~82@) (Mul c10~86@ b10~84@)) (Mul (Mul b10~84@ d10~88@) (Mul b10~84@ d10~88@))))) (=> (= temp_10_1~2515@ (Add (Mul (Mul (Mul c10~86@ a10~82@) (Mul d10~88@ c10~86@)) (Mul (Mul (Mul a10~82@ a10~82@) (Mul c10~86@ b10~84@)) (Mul (Mul b10~84@ d10~88@) (Mul b10~84@ d10~88@)))) (Mul (Mul (Mul a10~82@ a10~82@) (Mul d10~88@ c10~86@)) (Mul (Mul (Mul a10~82@ a10~82@) (Mul c10~86@ b10~84@)) (Mul (Mul b10~84@ d10~88@) (Mul b10~84@ d10~88@)))))) (and (=> (= tmp%39@ (Mul (Mul c10~86@ a10~82@) (Mul d10~88@ c10~86@))) (=> (= tmp%40@ (Mul (Mul a10~82@ a10~82@) (Mul d10~88@ c10~86@))) (=> (= tmp%41@ (Mul (Mul (Mul a10~82@ a10~82@) (Mul c10~86@ b10~84@)) (Mul (Mul b10~84@ d10~88@) (Mul b10~84@ d10~88@)))) (=> (ens%main!nl_basics.lemma_mul_is_distributive. tmp%39@ tmp%40@ tmp%41@) (=> %%location_label%%10 (= temp_10_0~2418@ temp_10_1~2515@)))))) (=> (= temp_10_0~2418@ temp_10_1~2515@) (=> (= temp_11_0~2670@ (Mul (Mul (Mul (Mul d11~96@ b11~92@) (Mul c11~94@ a11~90@)) (Sub (Mul d11~96@ b11~92@) 36)) (Mul (Mul (Add d11~96@ c11~94@) (Add b11~92@ d11~96@)) (Mul (Mul a11~90@ b11~92@) (Mul c11~94@ d11~96@))))) (=> (= temp_11_1~2743@ (Mul (Mul (Mul (Mul (Mul d11~96@ b11~92@) (Mul c11~94@ a11~90@)) (Sub (Mul d11~96@ b11~92@) 36)) (Mul (Add d11~96@ c11~94@) (Add b11~92@ d11~96@))) (Mul (Mul a11~90@ b11~92@) (Mul c11~94@ d11~96@)))) (and (=> (= tmp%42@ (Mul (Mul (Mul d11~96@ b11~92@) (Mul c11~94@ a11~90@)) (Sub (Mul d11~96@ b11~92@) 36))) (=> (= tmp%43@ (Mul (Add d11~96@ c11~94@) (Add b11~92@ d11~96@))) (=> (= tmp%44@ (Mul (Mul a11~90@ b11~92@) (Mul c11~94@ d11~96@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%42@ tmp%43@ tmp%44@) (=> %%location_label%%11 (= temp_11_0~2670@ temp_11_1~2743@)))))) (=> (= temp_11_0~2670@ temp_11_1~2743@) (=> (= temp_12_0~2878@ (Mul (Mul (Mul (Mul a12~98@ a12~98@) (Mul b12~100@ c12~102@)) (Mul (Mul a12~98@ a12~98@) (Mul b12~100@ b12~100@))) (Mul c12~102@ (Mul (Mul b12~100@ a12~98@) (Sub d12~104@ d12~104@))))) (=> (= temp_12_1~2931@ (Mul (Mul (Mul (Mul a12~98@ a12~98@) (Mul b12~100@ c12~102@)) (Mul a12~98@ (Mul a12~98@ (Mul b12~100@ b12~100@)))) (Mul c12~102@ (Mul (Mul b12~100@ a12~98@) (Sub d12~104@ d12~104@))))) (and (=> (= tmp%45@ (Mul b12~100@ b12~100@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. a12~98@ a12~98@ tmp%45@) (=> %%location_label%%12 (= temp_12_0~2878@ temp_12_1~2931@)))) (=> (= temp_12_0~2878@ temp_12_1~2931@) (=> (= temp_13_0~3018@ (Add (Mul (Mul (Mul b13~108@ d13~112@) (Mul c13~110@ a13~106@)) (Mul (Mul c13~110@ a13~106@) (Sub a13~106@ d13~112@))) (Add d13~112@ (Mul (Mul c13~110@ c13~110@) (Mul a13~106@ d13~112@))))) (=> (= temp_13_1~3071@ (Add (Mul (Mul (Mul b13~108@ d13~112@) (Mul c13~110@ a13~106@)) (Mul (Mul a13~106@ c13~110@) (Sub a13~106@ d13~112@))) (Add d13~112@ (Mul (Mul c13~110@ c13~110@) (Mul a13~106@ d13~112@))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. c13~110@ a13~106@) (=> %%location_label%%13 (= temp_13_0~3018@ temp_13_1~3071@))) (=> (= temp_13_0~3018@ temp_13_1~3071@) (=> (= temp_14_0~3164@ (Mul (Mul (Add (Mul d14~120@ b14~116@) (Mul a14~114@ d14~120@)) (Mul (Mul b14~116@ b14~116@) (Add a14~114@ a14~114@))) (Mul (Sub (Add c14~118@ c14~118@) (Mul c14~118@ d14~120@)) (Mul (Mul a14~114@ a14~114@) (Mul b14~116@ a14~114@))))) (=> (= temp_14_1~3229@ (Mul (Mul (Mul (Mul b14~116@ b14~116@) (Add a14~114@ a14~114@)) (Add (Mul d14~120@ b14~116@) (Mul a14~114@ d14~120@))) (Mul (Sub (Add c14~118@ c14~118@) (Mul c14~118@ d14~120@)) (Mul (Mul a14~114@ a14~114@) (Mul b14~116@ a14~114@))))) (and (=> (= tmp%46@ (Mul (Mul b14~116@ b14~116@) (Add a14~114@ a14~114@))) (=> (= tmp%47@ (Add (Mul d14~120@ b14~116@) (Mul a14~114@ d14~120@))) (=> (ens%main!nl_basics.lemma_mul_is_commutative. tmp%46@ tmp%47@) (=> %%location_label%%14 (= temp_14_0~3164@ temp_14_1~3229@))))) (=> (= temp_14_0~3164@ temp_14_1~3229@) (=> (= temp_15_0~3350@ (Mul (Add (Mul (Add a15~122@ c15~126@) (Mul d15~128@ d15~128@)) (Mul (Mul a15~122@ c15~126@) (Mul 94 c15~126@))) (Mul (Mul b15~124@ b15~124@) (Sub (Mul c15~126@ b15~124@) (Mul b15~124@ c15~126@))))) (=> (= temp_15_1~3419@ (Mul (Add (Mul (Add a15~122@ c15~126@) (Mul d15~128@ d15~128@)) (Mul (Mul a15~122@ c15~126@) (Mul 94 c15~126@))) (Mul (Mul b15~124@ b15~124@) (Sub (Mul c15~126@ b15~124@) (Mul c15~126@ b15~124@))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. c15~126@ b15~124@) (=> (= tmp%48@ (Add (Mul (Add a15~122@ c15~126@) (Mul d15~128@ d15~128@)) (Mul (Mul a15~122@ c15~126@) (Mul 94 c15~126@)))) (=> (= tmp%49@ (Mul b15~124@ b15~124@)) (=> (= tmp%50@ (Sub (Mul c15~126@ b15~124@) (Mul c15~126@ b15~124@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%48@ tmp%49@ tmp%50@) (=> (= tmp%51@ (Add (Mul (Add a15~122@ c15~126@) (Mul d15~128@ d15~128@)) (Mul (Mul a15~122@ c15~126@) (Mul 94 c15~126@)))) (=> (= tmp%52@ (Mul b15~124@ b15~124@)) (=> (= tmp%53@ (Sub (Mul c15~126@ b15~124@) (Mul b15~124@ c15~126@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%51@ tmp%52@ tmp%53@) (=> %%location_label%%15 (= temp_15_0~3350@ temp_15_1~3419@))))))))))) (=> (= temp_15_0~3350@ temp_15_1~3419@) (=> (= temp_16_0~3648@ (Mul (Mul (Mul (Add a16~130@ b16~132@) (Mul 1 b16~132@)) (Sub (Sub d16~136@ c16~134@) (Mul a16~130@ c16~134@))) (Add (Mul (Mul 78 d16~136@) b16~132@) (Mul (Mul b16~132@ d16~136@) (Mul a16~130@ d16~136@))))) (=> (= temp_16_1~3733@ (Mul (Add (Mul (Mul 78 d16~136@) b16~132@) (Mul (Mul b16~132@ d16~136@) (Mul a16~130@ d16~136@))) (Mul (Mul (Add a16~130@ b16~132@) (Mul 1 b16~132@)) (Sub (Sub d16~136@ c16~134@) (Mul a16~130@ c16~134@))))) (and (=> (= tmp%54@ (Add (Mul (Mul 78 d16~136@) b16~132@) (Mul (Mul b16~132@ d16~136@) (Mul a16~130@ d16~136@)))) (=> (= tmp%55@ (Mul (Mul (Add a16~130@ b16~132@) (Mul 1 b16~132@)) (Sub (Sub d16~136@ c16~134@) (Mul a16~130@ c16~134@)))) (=> (ens%main!nl_basics.lemma_mul_is_commutative. tmp%54@ tmp%55@) (=> %%location_label%%16 (= temp_16_0~3648@ temp_16_1~3733@))))) (=> (= temp_16_0~3648@ temp_16_1~3733@) (=> (= temp_17_0~3902@ (Mul (Add (Mul (Mul d17~144@ d17~144@) c17~142@) (Mul (Mul 48 c17~142@) (Mul b17~140@ b17~140@))) (Mul (Mul (Mul b17~140@ d17~144@) b17~140@) (Mul (Sub b17~140@ b17~140@) (Mul d17~144@ 46))))) (=> (= temp_17_1~3983@ (Mul (Add (Mul (Mul d17~144@ d17~144@) c17~142@) (Mul (Mul c17~142@ 48) (Mul b17~140@ b17~140@))) (Mul (Mul (Mul b17~140@ d17~144@) b17~140@) (Mul (Sub b17~140@ b17~140@) (Mul d17~144@ 46))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. c17~142@ 48) (=> %%location_label%%17 (= temp_17_0~3902@ temp_17_1~3983@))) (=> (= temp_17_0~3902@ temp_17_1~3983@) (=> (= temp_18_0~4080@ (Mul (Mul (Mul (Mul c18~150@ d18~152@) (Mul c18~150@ b18~148@)) (Mul (Mul b18~148@ a18~146@) (Add b18~148@ b18~148@))) (Mul (Mul (Mul c18~150@ c18~150@) (Mul c18~150@ d18~152@)) (Sub (Mul b18~148@ a18~146@) (Mul a18~146@ d18~152@))))) (=> (= temp_18_1~4145@ (Mul (Mul (Mul (Mul c18~150@ d18~152@) (Mul c18~150@ b18~148@)) (Mul (Mul b18~148@ a18~146@) (Add b18~148@ b18~148@))) (Mul (Mul (Mul c18~150@ c18~150@) (Mul c18~150@ d18~152@)) (Sub (Mul b18~148@ a18~146@) (Mul d18~152@ a18~146@))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. d18~152@ a18~146@) (=> (= tmp%56@ (Mul (Mul (Mul c18~150@ d18~152@) (Mul c18~150@ b18~148@)) (Mul (Mul b18~148@ a18~146@) (Add b18~148@ b18~148@)))) (=> (= tmp%57@ (Mul (Mul c18~150@ c18~150@) (Mul c18~150@ d18~152@))) (=> (= tmp%58@ (Sub (Mul b18~148@ a18~146@) (Mul d18~152@ a18~146@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%56@ tmp%57@ tmp%58@) (=> (= tmp%59@ (Mul (Mul (Mul c18~150@ d18~152@) (Mul c18~150@ b18~148@)) (Mul (Mul b18~148@ a18~146@) (Add b18~148@ b18~148@)))) (=> (= tmp%60@ (Mul (Mul c18~150@ c18~150@) (Mul c18~150@ d18~152@))) (=> (= tmp%61@ (Sub (Mul b18~148@ a18~146@) (Mul a18~146@ d18~152@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%59@ tmp%60@ tmp%61@) (=> %%location_label%%18 (= temp_18_0~4080@ temp_18_1~4145@))))))))))) (=> (= temp_18_0~4080@ temp_18_1~4145@) (=> (= temp_19_0~4358@ (Mul (Add (Mul (Mul b19~156@ b19~156@) (Mul c19~158@ d19~160@)) (Mul (Mul c19~158@ d19~160@) d19~160@)) (Mul (Mul (Mul d19~160@ b19~156@) (Mul d19~160@ a19~154@)) (Mul (Mul a19~154@ c19~158@) (Mul b19~156@ d19~160@))))) (=> (= temp_19_1~4451@ (Add (Mul (Mul (Mul b19~156@ b19~156@) (Mul c19~158@ d19~160@)) (Mul (Mul (Mul d19~160@ b19~156@) (Mul d19~160@ a19~154@)) (Mul (Mul a19~154@ c19~158@) (Mul b19~156@ d19~160@)))) (Mul (Mul (Mul c19~158@ d19~160@) d19~160@) (Mul (Mul (Mul d19~160@ b19~156@) (Mul d19~160@ a19~154@)) (Mul (Mul a19~154@ c19~158@) (Mul b19~156@ d19~160@)))))) (and (=> (= tmp%62@ (Mul (Mul b19~156@ b19~156@) (Mul c19~158@ d19~160@))) (=> (= tmp%63@ (Mul (Mul c19~158@ d19~160@) d19~160@)) (=> (= tmp%64@ (Mul (Mul (Mul d19~160@ b19~156@) (Mul d19~160@ a19~154@)) (Mul (Mul a19~154@ c19~158@) (Mul b19~156@ d19~160@)))) (=> (ens%main!nl_basics.lemma_mul_is_distributive. tmp%62@ tmp%63@ tmp%64@) (=> %%location_label%%19 (= temp_19_0~4358@ temp_19_1~4451@)))))) (=> (= temp_19_0~4358@ temp_19_1~4451@) (=> (= temp_20_0~4586@ (Mul (Mul (Mul (Add b20~164@ b20~164@) (Mul c20~166@ d20~168@)) (Mul (Mul c20~166@ c20~166@) a20~162@)) (Mul (Add (Mul a20~162@ b20~164@) (Mul c20~166@ c20~166@)) (Mul c20~166@ (Mul b20~164@ a20~162@))))) (=> (= temp_20_1~4643@ (Mul (Mul (Mul (Add b20~164@ b20~164@) (Mul c20~166@ d20~168@)) (Mul (Mul c20~166@ c20~166@) a20~162@)) (Mul (Add (Mul a20~162@ b20~164@) (Mul c20~166@ c20~166@)) (Mul c20~166@ (Mul a20~162@ b20~164@))))) (and (=> (ens%main!nl_basics.lemma_mul_is_commutative. a20~162@ b20~164@) (=> (= tmp%65@ (Mul (Mul (Add b20~164@ b20~164@) (Mul c20~166@ d20~168@)) (Mul (Mul c20~166@ c20~166@) a20~162@))) (=> (= tmp%66@ (Add (Mul a20~162@ b20~164@) (Mul c20~166@ c20~166@))) (=> (= tmp%67@ (Mul c20~166@ (Mul a20~162@ b20~164@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%65@ tmp%66@ tmp%67@) (=> (= tmp%68@ (Mul (Mul (Add b20~164@ b20~164@) (Mul c20~166@ d20~168@)) (Mul (Mul c20~166@ c20~166@) a20~162@))) (=> (= tmp%69@ (Add (Mul a20~162@ b20~164@) (Mul c20~166@ c20~166@))) (=> (= tmp%70@ (Mul c20~166@ (Mul b20~164@ a20~162@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%68@ tmp%69@ tmp%70@) (=> %%location_label%%20 (= temp_20_0~4586@ temp_20_1~4643@))))))))))) (=> (= temp_20_0~4586@ temp_20_1~4643@) (=> (= temp_21_0~4844@ (Mul (Sub (Mul (Mul b21~172@ c21~174@) (Mul b21~172@ c21~174@)) (Sub (Mul c21~174@ a21~170@) (Sub a21~170@ c21~174@))) (Mul (Mul (Add b21~172@ b21~172@) (Mul c21~174@ d21~176@)) (Mul (Mul a21~170@ c21~174@) (Mul a21~170@ a21~170@))))) (=> (= temp_21_1~4909@ (Mul (Sub (Mul (Mul b21~172@ c21~174@) (Mul b21~172@ c21~174@)) (Sub (Mul c21~174@ a21~170@) (Sub a21~170@ c21~174@))) (Mul (Mul (Add b21~172@ b21~172@) (Mul c21~174@ d21~176@)) (Mul (Mul a21~170@ a21~170@) (Mul a21~170@ c21~174@))))) (and (=> (= tmp%71@ (Mul a21~170@ a21~170@)) (=> (= tmp%72@ (Mul a21~170@ c21~174@)) (=> (ens%main!nl_basics.lemma_mul_is_commutative. tmp%71@ tmp%72@) (=> (= tmp%73@ (Sub (Mul (Mul b21~172@ c21~174@) (Mul b21~172@ c21~174@)) (Sub (Mul c21~174@ a21~170@) (Sub a21~170@ c21~174@)))) (=> (= tmp%74@ (Mul (Add b21~172@ b21~172@) (Mul c21~174@ d21~176@))) (=> (= tmp%75@ (Mul (Mul a21~170@ a21~170@) (Mul a21~170@ c21~174@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%73@ tmp%74@ tmp%75@) (=> (= tmp%76@ (Sub (Mul (Mul b21~172@ c21~174@) (Mul b21~172@ c21~174@)) (Sub (Mul c21~174@ a21~170@) (Sub a21~170@ c21~174@)))) (=> (= tmp%77@ (Mul (Add b21~172@ b21~172@) (Mul c21~174@ d21~176@))) (=> (= tmp%78@ (Mul (Mul a21~170@ c21~174@) (Mul a21~170@ a21~170@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%76@ tmp%77@ tmp%78@) (=> %%location_label%%21 (= temp_21_0~4844@ temp_21_1~4909@))))))))))))) (=> (= temp_21_0~4844@ temp_21_1~4909@) (=> (= temp_22_0~5122@ (Mul (Mul (Mul (Mul c22~182@ b22~180@) (Mul a22~178@ a22~178@)) a22~178@) (Mul (Mul (Sub a22~178@ a22~178@) (Sub c22~182@ c22~182@)) (Mul (Add d22~184@ c22~182@) (Mul c22~182@ c22~182@))))) (=> (= temp_22_1~5175@ (Mul (Mul (Mul (Mul c22~182@ b22~180@) (Mul a22~178@ a22~178@)) a22~178@) (Mul (Mul (Sub a22~178@ a22~178@) (Sub c22~182@ c22~182@)) (Mul (Mul (Add d22~184@ c22~182@) c22~182@) c22~182@)))) (and (=> (= tmp%79@ (Mul (Mul (Mul c22~182@ b22~180@) (Mul a22~178@ a22~178@)) a22~178@)) (=> (= tmp%80@ (Mul (Sub a22~178@ a22~178@) (Sub c22~182@ c22~182@))) (=> (= tmp%81@ (Mul (Mul (Add d22~184@ c22~182@) c22~182@) c22~182@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%79@ tmp%80@ tmp%81@) (=> (= tmp%82@ (Add d22~184@ c22~182@)) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%82@ c22~182@ c22~182@) (=> (= tmp%83@ (Mul (Mul (Mul c22~182@ b22~180@) (Mul a22~178@ a22~178@)) a22~178@)) (=> (= tmp%84@ (Mul (Sub a22~178@ a22~178@) (Sub c22~182@ c22~182@))) (=> (= tmp%85@ (Mul (Add d22~184@ c22~182@) (Mul c22~182@ c22~182@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%83@ tmp%84@ tmp%85@) (=> %%location_label%%22 (= temp_22_0~5122@ temp_22_1~5175@)))))))))))) (=> (= temp_22_0~5122@ temp_22_1~5175@) (=> (= temp_23_0~5374@ (Mul (Sub (Mul (Mul d23~192@ d23~192@) (Mul a23~186@ a23~186@)) (Mul (Mul c23~190@ a23~186@) (Mul c23~190@ a23~186@))) (Mul (Sub (Mul b23~188@ d23~192@) (Add d23~192@ b23~188@)) (Mul (Sub a23~186@ c23~190@) (Mul d23~192@ c23~190@))))) (=> (= temp_23_1~5439@ (Mul (Sub (Mul (Mul d23~192@ d23~192@) (Mul a23~186@ a23~186@)) (Mul (Mul c23~190@ a23~186@) (Mul c23~190@ a23~186@))) (Mul (Mul (Sub a23~186@ c23~190@) (Mul d23~192@ c23~190@)) (Sub (Mul b23~188@ d23~192@) (Add d23~192@ b23~188@))))) (and (=> (= tmp%86@ (Mul (Sub a23~186@ c23~190@) (Mul d23~192@ c23~190@))) (=> (= tmp%87@ (Sub (Mul b23~188@ d23~192@) (Add d23~192@ b23~188@))) (=> (ens%main!nl_basics.lemma_mul_is_commutative. tmp%86@ tmp%87@) (=> %%location_label%%23 (= temp_23_0~5374@ temp_23_1~5439@))))) (=> (= temp_23_0~5374@ temp_23_1~5439@) (=> (= temp_24_0~5544@ (Sub (Mul (Mul (Mul d24~200@ c24~198@) (Mul b24~196@ a24~194@)) (Sub (Mul b24~196@ d24~200@) (Mul c24~198@ a24~194@))) (Mul (Mul (Add d24~200@ c24~198@) (Mul b24~196@ b24~196@)) c24~198@))) (=> (= temp_24_1~5597@ (Sub (Mul (Mul (Mul c24~198@ d24~200@) (Mul b24~196@ a24~194@)) (Sub (Mul b24~196@ d24~200@) (Mul c24~198@ a24~194@))) (Mul (Mul (Add d24~200@ c24~198@) (Mul b24~196@ b24~196@)) c24~198@))) (=> (ens%main!nl_basics.lemma_mul_is_commutative. c24~198@ d24~200@) (=> (= tmp%88@ (Mul c24~198@ d24~200@)) (=> (= tmp%89@ (Mul b24~196@ a24~194@)) (=> (= tmp%90@ (Sub (Mul b24~196@ d24~200@) (Mul c24~198@ a24~194@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%88@ tmp%89@ tmp%90@) (=> (= tmp%91@ (Mul d24~200@ c24~198@)) (=> (= tmp%92@ (Mul b24~196@ a24~194@)) (=> (= tmp%93@ (Sub (Mul b24~196@ d24~200@) (Mul c24~198@ a24~194@))) (=> (ens%main!nl_basics.lemma_mul_is_associative. tmp%91@ tmp%92@ tmp%93@) (=> %%location_label%%24 (= temp_24_0~5544@ temp_24_1~5597@)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert %%query%%)
(check-sat)
