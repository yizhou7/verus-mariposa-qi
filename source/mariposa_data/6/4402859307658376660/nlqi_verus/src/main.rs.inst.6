use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((((((c0*c0)*(d0*(90 as int)))*((a0*d0)*(b0*a0)))*(((c0*d0)*b0)*((b0*c0)*(a0*d0))))*((((d0*a0)*(b0*a0))*(38 as int))*c0))*((((a0*(a0+c0))*(b0*(d0+b0)))+(((a0-c0)*(c0*c0))*(a0*(d0-d0))))*((((a0*d0)*(c0*c0))*((b0*c0)*b0))*(((b0*c0)*(d0*a0))*((d0*d0)-(b0*b0))))));
	let temp_0_1 = ((((((c0*c0)*(d0*(90 as int)))*((a0*d0)*(b0*a0)))*(((c0*d0)*b0)*((a0*d0)*(b0*c0))))*((((d0*a0)*(b0*a0))*(38 as int))*c0))*((((a0*(a0+c0))*(b0*(d0+b0)))+(((a0-c0)*(c0*c0))*(a0*(d0-d0))))*((((a0*d0)*(c0*c0))*((b0*c0)*b0))*(((b0*c0)*(d0*a0))*((d0*d0)-(b0*b0))))));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_commutative((b0*c0), (a0*d0));}// 1
	let temp_1_0 = ((((((c1*c1)*(b1*c1))+c1)+((c1-(c1*a1))*((b1-c1)*(d1*(35 as int)))))*((((b1*c1)*(c1+d1))-((c1-d1)*(d1*b1)))-(((c1-d1)*(d1*a1))*((b1*c1)*(d1-d1)))))*(((((d1*c1)*(b1-b1))*((c1+a1)*(d1*d1)))+(((a1*b1)*(a1-d1))*b1))+(((d1*(c1*(70 as int)))*((a1*a1)*d1))-(((c1*b1)*(c1-a1))*((c1*d1)*(a1*a1))))));
	let temp_1_1 = ((((((c1*c1)*(b1*c1))+c1)+((c1-(c1*a1))*((b1-c1)*(d1*(35 as int)))))*((((b1*c1)*(c1+d1))-((c1-d1)*(d1*b1)))-(((c1-d1)*(a1*d1))*((b1*c1)*(d1-d1)))))*(((((d1*c1)*(b1-b1))*((c1+a1)*(d1*d1)))+(((a1*b1)*(a1-d1))*b1))+(((d1*(c1*(70 as int)))*((a1*a1)*d1))-(((c1*b1)*(c1-a1))*((c1*d1)*(a1*a1))))));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_commutative(d1, a1);}// 1
	let temp_2_0 = ((((((c2*b2)*(a2*b2))*((c2*d2)-b2))*(((d2*b2)+d2)*((a2*a2)*(d2*a2))))*c2)+(d2*((d2*((b2*b2)*(a2*d2)))+(b2*((a2*d2)*c2)))));
	let temp_2_1 = ((((((c2*b2)*(a2*b2))*((c2*d2)-b2))*(((d2*b2)+d2)*((a2*a2)*(a2*d2))))*c2)+(d2*((d2*((b2*b2)*(a2*d2)))+(b2*((a2*d2)*c2)))));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_commutative(d2, a2);}// 1
	let temp_3_0 = ((((((a3*d3)+(a3*c3))*a3)-(((d3*c3)*(b3*d3))*(b3*(a3+c3))))*((((c3-b3)*(b3*a3))+(a3*(b3*b3)))-(((d3+d3)*(b3*a3))-((d3*b3)*b3))))*(((((c3*b3)+(c3-a3))*((c3*c3)*(d3*d3)))*((b3*(c3*b3))*((b3*d3)*(d3*b3))))*(((((68 as int)*a3)*(c3*c3))+((d3*c3)*(b3-a3)))*d3)));
	let temp_3_1 = ((((((a3*d3)+(a3*c3))*a3)-(((d3*c3)*(b3*d3))*(b3*(a3+c3))))*((((c3-b3)*(b3*a3))+(a3*(b3*b3)))-(((d3+d3)*(a3*b3))-((d3*b3)*b3))))*(((((c3*b3)+(c3-a3))*((c3*c3)*(d3*d3)))*((b3*(c3*b3))*((b3*d3)*(d3*b3))))*(((((68 as int)*a3)*(c3*c3))+((d3*c3)*(b3-a3)))*d3)));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_is_commutative(b3, a3);}// 1
	let temp_4_0 = ((((a4*((b4*b4)-(d4*c4)))+(((b4*a4)*(a4*d4))-d4))*(b4*(((b4*c4)*b4)+((b4*b4)*(a4*c4)))))*(((((a4-d4)+(d4*c4))*((c4*a4)+(b4*c4)))*(((c4*a4)*((96 as int)*a4))*((a4*c4)*(b4*c4))))*((((d4*d4)+(a4*b4))*(b4*(c4*a4)))*(((d4*b4)*b4)*a4))));
	let temp_4_1 = ((((a4*((b4*b4)-(d4*c4)))+(((b4*a4)*(a4*d4))-d4))*(b4*(((b4*c4)*b4)+((b4*b4)*(a4*c4)))))*(((((a4-d4)+(d4*c4))*((c4*a4)+(b4*c4)))*(((a4*c4)*((96 as int)*a4))*((a4*c4)*(b4*c4))))*((((d4*d4)+(a4*b4))*(b4*(c4*a4)))*(((d4*b4)*b4)*a4))));
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_is_commutative(c4, a4);}// 1
	let temp_5_0 = ((((((d5*c5)*(c5*c5))+((a5*a5)*(b5*b5)))-(c5-((b5-c5)+(b5*c5))))*(((b5*b5)*((b5*(52 as int))+(a5-a5)))*(((d5*d5)-(a5*a5))*((c5*d5)+(b5*a5)))))*(((a5*((d5*b5)*(b5+c5)))*(((b5*b5)*(c5-c5))*((a5+d5)*(b5-b5))))*((((d5*a5)*(d5*a5))*((c5*d5)*a5))*(((b5*d5)*(d5*(97 as int)))*((b5*c5)*(b5+c5))))));
	let temp_5_1 = ((((((d5*c5)*(c5*c5))+((a5*a5)*(b5*b5)))-(c5-((b5-c5)+(b5*c5))))*(((b5*b5)*((b5*(52 as int))+(a5-a5)))*(((d5*d5)-(a5*a5))*((c5*d5)+(b5*a5)))))*(((a5*((d5*b5)*(b5+c5)))*(((b5*b5)*(c5-c5))*((a5+d5)*(b5-b5))))*((((d5*a5)*(a5*d5))*((c5*d5)*a5))*(((b5*d5)*(d5*(97 as int)))*((b5*c5)*(b5+c5))))));
	assert(temp_5_0 == temp_5_1) by 
			{lemma_mul_is_commutative(d5, a5);}// 1

}

} // verus!