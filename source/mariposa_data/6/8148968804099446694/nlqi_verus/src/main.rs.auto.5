use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn auto_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((((((a0*c0)-d0)+((d0*b0)-(a0*c0)))*((b0*(d0*c0))*((a0*a0)*(d0*c0))))*(((d0*(b0*b0))*((d0*b0)*((88 as int)*c0)))*(((c0*b0)-(a0+c0))*((d0*b0)*(a0*b0)))))*(((((c0*d0)*(d0*d0))*(b0*(d0*b0)))*(((c0*b0)*(a0*b0))*((a0*b0)-(c0*c0))))*((((d0+c0)+(d0+c0))*d0)*(((d0*d0)*(b0*b0))*b0))));
	let temp_0_1 = ((((((a0*c0)-d0)+((d0*b0)-(a0*c0)))*((b0*(d0*c0))*((a0*a0)*(d0*c0))))*((((d0*b0)*((88 as int)*c0))*(d0*(b0*b0)))*(((c0*b0)-(a0+c0))*((d0*b0)*(a0*b0)))))*(((((c0*d0)*(d0*d0))*(b0*(d0*b0)))*(((c0*b0)*(a0*b0))*((a0*b0)-(c0*c0))))*((((d0+c0)+(d0+c0))*d0)*(((d0*d0)*(b0*b0))*b0))));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_1_0 = (((((b1-(d1*c1))*((a1*d1)*(a1*d1)))*((c1*(a1*a1))-((a1*d1)*(d1*c1))))*(((c1+(c1*c1))*((b1*c1)*(d1*b1)))*(((b1*b1)*(c1*a1))*d1)))*(((((d1+b1)*(b1-a1))*((a1-c1)*(c1*d1)))*(((d1*d1)*(d1*b1))*((a1*d1)*a1)))+((((c1*c1)*(c1*d1))*((c1*c1)*(d1*a1)))+(((d1*a1)*(d1*a1))*((d1+a1)*(a1+a1))))));
	let temp_1_1 = (((((b1-(d1*c1))*((a1*d1)*(a1*d1)))*((c1*(a1*a1))-((d1*a1)*(d1*c1))))*(((c1+(c1*c1))*((b1*c1)*(d1*b1)))*(((b1*b1)*(c1*a1))*d1)))*(((((d1+b1)*(b1-a1))*((a1-c1)*(c1*d1)))*(((d1*d1)*(d1*b1))*((a1*d1)*a1)))+((((c1*c1)*(c1*d1))*((c1*c1)*(d1*a1)))+(((d1*a1)*(d1*a1))*((d1+a1)*(a1+a1))))));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_2_0 = ((((((c2*d2)*(d2-b2))*((b2*b2)-(d2*a2)))*(((d2-d2)*a2)+((a2*a2)*(d2*b2))))*((((d2*a2)*c2)*((c2*a2)+(b2*a2)))*(((a2*a2)*(d2*b2))*((b2*(1 as int))*(d2*d2)))))*(((d2*(((91 as int)+d2)*(a2*c2)))+d2)*((((a2*b2)*(a2+b2))*((a2*a2)*(a2*a2)))*(((a2+a2)*c2)*((b2*b2)*(a2*c2))))));
	let temp_2_1 = ((((((c2*d2)*(d2-b2))*((b2*b2)-(d2*a2)))*(((d2-d2)*a2)+((a2*a2)*(d2*b2))))*(((((d2*a2)*c2)*(c2*a2))+(((d2*a2)*c2)*(b2*a2)))*(((a2*a2)*(d2*b2))*((b2*(1 as int))*(d2*d2)))))*(((d2*(((91 as int)+d2)*(a2*c2)))+d2)*((((a2*b2)*(a2+b2))*((a2*a2)*(a2*a2)))*(((a2+a2)*c2)*((b2*b2)*(a2*c2))))));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_3_0 = ((((a3*(b3+(d3-c3)))*((d3*(d3*d3))*((d3*a3)*(a3*d3))))-((((a3*b3)*(d3*b3))*((c3*c3)*(c3*a3)))*(d3*(b3*(a3*a3)))))*(((((b3*a3)*b3)*c3)*((b3*(b3*b3))+((d3*b3)*(a3*b3))))+((((d3-d3)*((53 as int)+d3))*((b3*c3)*(c3-b3)))+(((a3+c3)-(d3*d3))*((c3*a3)*(b3-a3))))));
	let temp_3_1 = ((((a3*(b3+(d3-c3)))*((d3*(d3*d3))*((d3*a3)*(a3*d3))))-((((a3*b3)*(d3*b3))*((c3*a3)*(c3*c3)))*(d3*(b3*(a3*a3)))))*(((((b3*a3)*b3)*c3)*((b3*(b3*b3))+((d3*b3)*(a3*b3))))+((((d3-d3)*((53 as int)+d3))*((b3*c3)*(c3-b3)))+(((a3+c3)-(d3*d3))*((c3*a3)*(b3-a3))))));
	assert(temp_3_0 == temp_3_1) by 
			{lemma_mul_properties_auto_1();}// 1
	let temp_4_0 = ((((((a4*c4)*b4)*c4)*(((b4*c4)*(c4*b4))*((d4*a4)*(d4+c4))))+((c4*((d4+a4)*(c4*b4)))-((((60 as int)*a4)*(c4*c4))*((b4*d4)*(d4*c4)))))*(((((d4*b4)-(b4*b4))*((c4*b4)+(d4*d4)))*(((d4*c4)*(d4*a4))*((a4*c4)*(d4*a4))))+((((a4*b4)*(b4*b4))*((b4*d4)*(b4*a4)))*(((b4*d4)*(b4*a4))*((a4+d4)*(c4*b4))))));
	let temp_4_1 = ((((((a4*c4)*b4)*c4)*(((b4*c4)*(c4*b4))*((d4*a4)*(d4+c4))))+((c4*((d4+a4)*(c4*b4)))-((((60 as int)*a4)*(c4*c4))*((b4*d4)*(d4*c4)))))*(((((d4*b4)-(b4*b4))*((c4*b4)+(d4*d4)))*((((d4*c4)*d4)*a4)*((a4*c4)*(d4*a4))))+((((a4*b4)*(b4*b4))*((b4*d4)*(b4*a4)))*(((b4*d4)*(b4*a4))*((a4+d4)*(c4*b4))))));
	assert(temp_4_0 == temp_4_1) by 
			{lemma_mul_properties_auto_1();}// 1

}

} // verus!