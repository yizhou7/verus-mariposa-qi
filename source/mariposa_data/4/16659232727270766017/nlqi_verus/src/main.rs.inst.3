use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn inst_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int)
{
	let temp_0_0 = ((((c0*d0)*d0)*((d0*a0)*(d0-a0)))*(((b0*c0)*(c0*c0))*((d0*c0)-(a0*a0))));
	let temp_0_1 = ((((d0*c0)*d0)*((d0*a0)*(d0-a0)))*(((b0*c0)*(c0*c0))*((d0*c0)-(a0*a0))));
	assert(temp_0_0 == temp_0_1) by 
			{lemma_mul_is_commutative(c0, d0);}// 1
	let temp_1_0 = ((((b1*(22 as int))+(b1*b1))*((c1*c1)*(a1*a1)))*(((a1*b1)*(a1*d1))*((a1+b1)*(c1*d1))));
	let temp_1_1 = ((((b1*(22 as int))+(b1*b1))*((c1*c1)*(a1*a1)))*(((a1*b1)*(a1*d1))*((c1*d1)*(a1+b1))));
	assert(temp_1_0 == temp_1_1) by 
			{lemma_mul_is_commutative((a1+b1), (c1*d1));}// 1
	let temp_2_0 = ((((c2*a2)+(c2*a2))*((b2+a2)*(c2*b2)))*(((b2+b2)*(b2*c2))-((b2-a2)*((50 as int)*d2))));
	let temp_2_1 = (((((c2*a2)+(c2*a2))*(b2+a2))*(c2*b2))*(((b2+b2)*(b2*c2))-((b2-a2)*((50 as int)*d2))));
	assert(temp_2_0 == temp_2_1) by 
			{lemma_mul_is_associative(((c2*a2)+(c2*a2)), (b2+a2), (c2*b2));}// 1

}

} // verus!