use builtin_macros::*;
use builtin::*;
mod nl_basics;
use crate::nl_basics::*;
verus! {

pub proof fn nlarith_0(a0: int, b0: int, c0: int, d0: int,
a1: int, b1: int, c1: int, d1: int,
a2: int, b2: int, c2: int, d2: int,
a3: int, b3: int, c3: int, d3: int,
a4: int, b4: int, c4: int, d4: int,
a5: int, b5: int, c5: int, d5: int,
a6: int, b6: int, c6: int, d6: int,
a7: int, b7: int, c7: int, d7: int,
a8: int, b8: int, c8: int, d8: int,
a9: int, b9: int, c9: int, d9: int) by (nonlinear_arith)
{
	let temp_0_0 = ((((d0*c0)*(d0-d0))+((a0*a0)*(a0*b0)))*(((d0*b0)*(d0+b0))*a0));
	let temp_0_1 = ((((d0*b0)*(d0+b0))*a0)*(((d0*c0)*(d0-d0))+((a0*a0)*(a0*b0))));
	assert(temp_0_0 == temp_0_1);
	let temp_1_0 = ((((d1*b1)*a1)*((c1+b1)*(a1*a1)))*(((b1+b1)*(a1*(41 as int)))*((c1-d1)*(d1*b1))));
	let temp_1_1 = (((d1*b1)*(a1*((c1+b1)*(a1*a1))))*(((b1+b1)*(a1*(41 as int)))*((c1-d1)*(d1*b1))));
	assert(temp_1_0 == temp_1_1);
	let temp_2_0 = ((((a2*d2)*(a2*c2))*((a2*a2)*(d2*a2)))+(((a2*c2)*(a2*c2))*((d2*b2)*(d2*d2))));
	let temp_2_1 = ((((a2*d2)*(a2*c2))*((a2*a2)*(d2*a2)))+(((d2*b2)*(d2*d2))*((a2*c2)*(a2*c2))));
	assert(temp_2_0 == temp_2_1);
	let temp_3_0 = ((((d3-d3)*(d3*a3))*(((1 as int)*b3)*(a3+c3)))*(((b3-b3)*(c3*c3))*((c3*b3)*c3)));
	let temp_3_1 = ((((d3*(d3*a3))-(d3*(d3*a3)))*(((1 as int)*b3)*(a3+c3)))*(((b3-b3)*(c3*c3))*((c3*b3)*c3)));
	assert(temp_3_0 == temp_3_1);
	let temp_4_0 = ((((a4+a4)*(b4*c4))*((d4-d4)*(c4+d4)))*(((d4*b4)*(c4*b4))-(a4+(d4*d4))));
	let temp_4_1 = ((((d4*b4)*(c4*b4))-(a4+(d4*d4)))*(((a4+a4)*(b4*c4))*((d4-d4)*(c4+d4))));
	assert(temp_4_0 == temp_4_1);
	let temp_5_0 = ((((d5-c5)*(a5*a5))*(d5*(c5*d5)))*(((a5*d5)*(d5*b5))*((d5*a5)*(b5*b5))));
	let temp_5_1 = (((((d5-c5)*a5)*a5)*(d5*(c5*d5)))*(((a5*d5)*(d5*b5))*((d5*a5)*(b5*b5))));
	assert(temp_5_0 == temp_5_1);
	let temp_6_0 = ((((c6*c6)-(c6*b6))*((c6-b6)*(d6-b6)))*(((a6*a6)*(b6-c6))*((c6*b6)*(a6*a6))));
	let temp_6_1 = (((c6*(c6-b6))*((c6-b6)*(d6-b6)))*(((a6*a6)*(b6-c6))*((c6*b6)*(a6*a6))));
	assert(temp_6_0 == temp_6_1);
	let temp_7_0 = ((((c7*d7)-(c7*c7))*((a7*b7)-(c7*b7)))-(((d7*c7)-(d7*b7))*((d7+b7)*(d7+c7))));
	let temp_7_1 = ((((c7*d7)-(c7*c7))*((a7*b7)-(b7*c7)))-(((d7*c7)-(d7*b7))*((d7+b7)*(d7+c7))));
	assert(temp_7_0 == temp_7_1);
	let temp_8_0 = ((((a8*c8)*(a8*a8))*((c8*b8)*(b8*d8)))*(((d8-c8)*(d8*b8))*((b8*d8)*(a8*b8))));
	let temp_8_1 = (((((a8*c8)*(a8*a8))*((c8*b8)*(b8*d8)))*((d8-c8)*(d8*b8)))*((b8*d8)*(a8*b8)));
	assert(temp_8_0 == temp_8_1);

}

} // verus!